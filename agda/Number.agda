{-# OPTIONS --cubical --no-import-sorts #-}

module Number where

open import Agda.Primitive renaming (_‚äî_ to ‚Ñì-max; lsuc to ‚Ñì-suc; lzero to ‚Ñì-zero)

private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' : Level

open import Cubical.Foundations.Everything renaming (_‚Åª¬π to _‚Åª¬π·µñ; assoc to ‚àô-assoc)
open import Cubical.Relation.Nullary.Base -- ¬¨_
open import Cubical.Relation.Binary.Base -- Rel

-- open import Data.Nat.Base using (‚Ñï) renaming (_‚â§_ to _‚â§‚Çô_)
open import Cubical.Data.Nat using (‚Ñï; zero; suc) renaming (_+_ to _+‚Çô_)
open import Cubical.Data.Nat.Order renaming (zero-‚â§ to z‚â§n; suc-‚â§-suc to s‚â§s; _‚â§_ to _‚â§‚Çô_; _<_ to _<‚Çô_)

open import Cubical.Data.Unit.Base -- Unit
open import Cubical.Data.Empty -- ‚ä•
open import Cubical.Data.Sum.Base renaming (_‚äé_ to infixr 4 _‚äé_)
open import Cubical.Data.Sigma.Base renaming (_√ó_ to infixr 4 _√ó_)
open import Cubical.Data.Empty renaming (elim to ‚ä•-elim) -- `‚ä•` and `elim`
open import Cubical.Data.Maybe.Base
open import Function.Base using (_‚àã_)

-- open import Bundles

open import Number.Postulates
open import Number.Structures ‚Ñù‚Ñì ‚Ñù‚Ñì'
open import Number.Bundles    ‚Ñù‚Ñì ‚Ñù‚Ñì'
open import Number.Inclusions ‚Ñù‚Ñì ‚Ñù‚Ñì'
open import Number.Blueprint

open import Number.Coercions

‚Ñù‚Ü™‚Ñù : ‚Ñù.‚Ñù ‚Üí ‚Ñù.‚Ñù
‚Ñù‚Ü™‚Ñù x = x

{-
‚Ñù‚Ü™‚Ñùinc : IsROrderedFieldInclusion ‚ÑùOF ‚ÑùOF ‚Ñù‚Ü™‚Ñù
‚Ñù‚Ü™‚Ñùinc = {!!}
-}


open import Cubical.Data.Fin.Base
-- import Cubical.Data.Fin.Properties
open import Cubical.Data.Nat using (‚Ñï; zero; suc) renaming (_+_ to _+‚Çô_)
open import Cubical.Data.Nat.Properties using (+-suc; injSuc; snotz; +-comm; +-assoc; +-zero; inj-m+)
open import Cubical.Data.Nat.Order renaming (zero-‚â§ to z‚â§n; suc-‚â§-suc to s‚â§s; _‚â§_ to _‚â§‚Çô_; _<_ to _<‚Çô_; _‚âü_ to _‚âü‚Çô_)
-- open import Data.Nat.Base using (‚Ñï; z‚â§n; s‚â§s; zero; suc) renaming (_‚â§_ to _‚â§‚Çô_; _<_ to _<‚Çô_; _+_ to _+‚Çô_)
open import Agda.Builtin.Bool renaming (true to TT; false to FF)
open import Function.Base using (it; _$_) -- instance search
import Cubical.Data.Fin.Properties
open import Data.Nat.Properties using (+-mono-<)

-- NOTE: well, for 15 allowed coercions, we might just enumerate them
--   unfortunately with overlapping patterns a style as in `Cl` is not possible
--   we need to explicitly write out all the 5√ó5 combinations
--   or, we implement a min operator which might work even with overlapping patterns

k+x+sy‚â¢x : ‚àÄ k x y ‚Üí ¬¨(k +‚Çô (x +‚Çô suc y) ‚â° x)
k+x+sy‚â¢x k x y p = snotz $ sym (+-suc k y) ‚àô inj-m+ {x} (+-assoc x k (suc y) ‚àô (Œª i ‚Üí (+-comm x k) i +‚Çô (suc y)) ‚àô sym (+-assoc k x (suc y)) ‚àô p ‚àô sym (+-zero x))

-- num {isNat     ,, p} (number (x , q)) = x
-- num {isInt     ,, p} (number (x , q)) = x
-- num {isRat     ,, p} (number (x , q)) = x
-- num {isReal    ,, p} (number (x , q)) = x
-- num {isComplex ,, p} (number (x , q)) = x


-- TODO: name this "inject" instead of "coerce"
-- TODO: make the module ‚Ñ§ and the Carrier ‚Ñ§.‚Ñ§
-- TODO: for a binary relation `a # b` it would be nice to have a way to compose ‚â°-pathes to the left and the right
--       similar to how ‚àô can be used for pathes
--       this reasoning might extend to transitive relations
--       `cong‚ÇÇ _#_ refl x` and `cong‚ÇÇ _#_ x refl` to this (together with `transport`)
-- NOTE: maybe ‚Ñï‚Ü™‚Ñ§ should be a postfix operation

-- module _ where
-- module ‚Ñï' = ROrderedCommSemiring ‚Ñï.Bundle
-- module ‚Ñ§' = ROrderedCommRing     ‚Ñ§.Bundle
-- module ‚Ñö' = ROrderedField        ‚Ñö.Bundle
-- module ‚Ñù' = ROrderedField        ‚Ñù.Bundle
-- module ‚ÑÇ' = RField               ‚ÑÇ.Bundle-- 

  

-- coerce-OCSR : ‚àÄ{l p} {ll : NumberLevel} {ùïèOCSR ùïêOCSR : ROrderedCommSemiring {‚Ñù‚Ñì} {‚Ñù‚Ñì'}}
--             ‚Üí (x : Number (l ,, p))
--             ‚Üí {f : Il l ‚Üí Il ll}
--             ‚Üí IsROrderedCommSemiringInclusion ùïèOCSR ùïêOCSR f
--             ‚Üí Ip ll p (f (num x))
-- coerce-OCSR {l} {ll} {p} {ùïèOCSR} {ùïêOCSR} {f} (number (x , q)) = ?



coerce : (from : NumberLevel)
       ‚Üí (to   : NumberLevel)
       ‚Üí from ‚â§‚Çô‚Çó' to
       ‚Üí ‚àÄ{p}
       ‚Üí Number (from ,, availablePositivity from p)
       ‚Üí Number (to   ,, availablePositivity to   p)
coerce isNat     isNat     q {p} x = x 
coerce isInt     isInt     q {p} x = x
coerce isRat     isRat     q {p} x = x
coerce isReal    isReal    q {p} x = x
coerce isComplex isComplex q {p} x = x
coerce isNat     isInt     q {p} x = number (‚Ñï‚Ü™‚Ñ§ (num x) , coerce-‚Ñï‚Ü™‚Ñ§ x)
coerce isNat     isRat     q {p} x = number (‚Ñï‚Ü™‚Ñö (num x) , coerce-‚Ñï‚Ü™‚Ñö x)
coerce isNat     isReal    q {p} x = number (‚Ñï‚Ü™‚Ñù (num x) , coerce-‚Ñï‚Ü™‚Ñù x)
coerce isNat     isComplex q {p} x = number (‚Ñï‚Ü™‚ÑÇ (num x) , coerce-‚Ñï‚Ü™‚ÑÇ x)
coerce isInt     isRat     q {p} x = number (‚Ñ§‚Ü™‚Ñö (num x) , coerce-‚Ñ§‚Ü™‚Ñö x)
coerce isInt     isReal    q {p} x = number (‚Ñ§‚Ü™‚Ñù (num x) , coerce-‚Ñ§‚Ü™‚Ñù x)
coerce isInt     isComplex q {p} x = number (‚Ñ§‚Ü™‚ÑÇ (num x) , coerce-‚Ñ§‚Ü™‚ÑÇ x)
coerce isRat     isReal    q {p} x = number (‚Ñö‚Ü™‚Ñù (num x) , coerce-‚Ñö‚Ü™‚Ñù x)
coerce isRat     isComplex q {p} x = number (‚Ñö‚Ü™‚ÑÇ (num x) , coerce-‚Ñö‚Ü™‚ÑÇ x)
coerce isReal    isComplex q {p} x = number (‚Ñù‚Ü™‚ÑÇ (num x) , coerce-‚Ñù‚Ü™‚ÑÇ x)
--coerce x         y         = nothing
coerce isInt     isNat  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isNat  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isRat     isNat  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isNat  ,, p)} (k+x+sy‚â¢x _ _ _ q)  
coerce isRat     isInt  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isInt  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isReal    isNat  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isNat  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isReal    isInt  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isInt  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isReal    isRat  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isRat  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isComplex isNat  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isNat  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isComplex isInt  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isInt  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isComplex isRat  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isRat  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isComplex isReal (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isReal ,, p)} (k+x+sy‚â¢x _ _ _ q)


+-Types : NumberProp ‚Üí NumberProp ‚Üí NumberProp
+-Types (level‚ÇÄ ,, pos‚ÇÄ) (level‚ÇÅ ,, pos‚ÇÅ) =  (max‚Çô‚Çó' level‚ÇÄ level‚ÇÅ) ,, +-Positivity pos‚ÇÄ pos‚ÇÅ

¬∑-Types : NumberProp ‚Üí NumberProp ‚Üí NumberProp
¬∑-Types (level‚ÇÄ ,, pos‚ÇÄ) (level‚ÇÅ ,, pos‚ÇÅ) =  (max‚Çô‚Çó' level‚ÇÄ level‚ÇÅ) ,, ¬∑-Positivity pos‚ÇÄ pos‚ÇÅ

private
  instance
    z‚â§n' : ‚àÄ {n}                 ‚Üí zero  ‚â§‚Çô n
    z‚â§n' {n} = z‚â§n
    s‚â§s' : ‚àÄ {m n} {{m‚â§n : m ‚â§‚Çô n}} ‚Üí suc m ‚â§‚Çô suc n
    s‚â§s' {m} {n} {{m‚â§n}} = s‚â§s m‚â§n

‚Åª¬π-Levels : (a : NumberLevel) ‚Üí Œ£[ b ‚àà NumberLevel ] a ‚â§‚Çô‚Çó b
‚Åª¬π-Levels isNat     = isRat     , it
‚Åª¬π-Levels isInt     = isRat     , it
‚Åª¬π-Levels isRat     = isRat     , it
‚Åª¬π-Levels isReal    = isReal    , it
‚Åª¬π-Levels isComplex = isComplex , it

‚Åª¬π-Levels' : (a : NumberLevel) ‚Üí NumberLevel
‚Åª¬π-Levels' x = max‚Çô‚Çó' x isRat

private
  pattern X   = anyPositivity
  pattern X‚Å∫‚Åª = isNonzero
  pattern X‚ÇÄ‚Å∫ = isNonnegative
  pattern X‚Å∫  = isPositive
  pattern X‚Åª  = isNegative
  pattern X‚ÇÄ‚Åª = isNonpositive

‚Åª¬π-Types : NumberProp ‚Üí Maybe NumberProp
‚Åª¬π-Types (level ,, X  ) = nothing
‚Åª¬π-Types (level ,, X‚ÇÄ‚Å∫) = nothing
‚Åª¬π-Types (level ,, X‚ÇÄ‚Åª) = nothing
‚Åª¬π-Types (level ,, p  ) = just (fst (‚Åª¬π-Levels level) ,, p)

-- ‚àÄ{{ q : Unit }} ‚Üí Number (level ,, X‚Å∫‚Åª)
-- ‚àÄ{{ q : Unit }} ‚Üí Number (level ,, X‚Å∫ )
-- ‚àÄ{{ q : Unit }} ‚Üí Number (level ,, X‚Åª )

open ‚Ñï‚Åø
open ‚Ñ§·∂ª ‚Ñ§.bundle
open ‚Ñö·∂† ‚Ñö.bundle
open ‚Ñù ≥ ‚Ñù.bundle
open ‚ÑÇ·∂ú ‚ÑÇ.bundle


‚Åª¬π-Types' : ‚àÄ{l p} ‚Üí Number (l ,, p) ‚Üí Type (‚Ñì-max ‚Ñù‚Ñì ‚Ñù‚Ñì')
‚Åª¬π-Types' {level    } {X‚Å∫‚Åª} (number (x , p)) = ‚àÄ{{ q : Unit    }} ‚Üí Number (level     ,, X‚Å∫‚Åª)
‚Åª¬π-Types' {level    } {X‚Å∫ } (number (x , p)) = ‚àÄ{{ q : Unit    }} ‚Üí Number (level     ,, X‚Å∫ )
‚Åª¬π-Types' {level    } {X‚Åª } (number (x , p)) = ‚àÄ{{ q : Unit    }} ‚Üí Number (level     ,, X‚Åª )
‚Åª¬π-Types' {isNat    } {X  } (number (x , p)) = ‚àÄ{{ q : x #‚Åø 0‚Åø }} ‚Üí Number (isNat     ,, X‚Å∫‚Åª)
‚Åª¬π-Types' {isInt    } {X  } (number (x , p)) = ‚àÄ{{ q : x #·∂ª 0·∂ª }} ‚Üí Number (isInt     ,, X‚Å∫‚Åª)
‚Åª¬π-Types' {isRat    } {X  } (number (x , p)) = ‚àÄ{{ q : x #·∂† 0·∂† }} ‚Üí Number (isRat     ,, X‚Å∫‚Åª)
‚Åª¬π-Types' {isReal   } {X  } (number (x , p)) = ‚àÄ{{ q : x # ≥ 0 ≥ }} ‚Üí Number (isReal    ,, X‚Å∫‚Åª)
‚Åª¬π-Types' {isComplex} {X  } (number (x , p)) = ‚àÄ{{ q : x #·∂ú 0·∂ú }} ‚Üí Number (isComplex ,, X‚Å∫‚Åª)
‚Åª¬π-Types' {isNat    } {X‚ÇÄ‚Å∫} (number (x , p)) = ‚àÄ{{ q : x #‚Åø 0‚Åø }} ‚Üí Number (isNat     ,, X‚Å∫ )
‚Åª¬π-Types' {isInt    } {X‚ÇÄ‚Å∫} (number (x , p)) = ‚àÄ{{ q : x #·∂ª 0·∂ª }} ‚Üí Number (isInt     ,, X‚Å∫ )
‚Åª¬π-Types' {isRat    } {X‚ÇÄ‚Å∫} (number (x , p)) = ‚àÄ{{ q : x #·∂† 0·∂† }} ‚Üí Number (isRat     ,, X‚Å∫ )
‚Åª¬π-Types' {isReal   } {X‚ÇÄ‚Å∫} (number (x , p)) = ‚àÄ{{ q : x # ≥ 0 ≥ }} ‚Üí Number (isReal    ,, X‚Å∫ )
‚Åª¬π-Types' {isNat    } {X‚ÇÄ‚Åª} (number (x , p)) = ‚àÄ{{ q : x #‚Åø 0‚Åø }} ‚Üí Number (isNat     ,, X‚Åª )
‚Åª¬π-Types' {isInt    } {X‚ÇÄ‚Åª} (number (x , p)) = ‚àÄ{{ q : x #·∂ª 0·∂ª }} ‚Üí Number (isInt     ,, X‚Åª )
‚Åª¬π-Types' {isRat    } {X‚ÇÄ‚Åª} (number (x , p)) = ‚àÄ{{ q : x #·∂† 0·∂† }} ‚Üí Number (isRat     ,, X‚Åª )
‚Åª¬π-Types' {isReal   } {X‚ÇÄ‚Åª} (number (x , p)) = ‚àÄ{{ q : x # ≥ 0 ≥ }} ‚Üí Number (isReal    ,, X‚Åª )

-Levels : NumberLevel ‚Üí NumberLevel
-Levels x = min‚Çô‚Çó' x isInt
-- -Levels isNat = isInt
-- -Levels x     = x

-Types : NumberProp ‚Üí NumberProp
-Types (level ,, X  ) = -Levels level ,, X
-Types (level ,, X‚Å∫‚Åª) = -Levels level ,, X‚Å∫‚Åª
-Types (level ,, X‚ÇÄ‚Å∫) = -Levels level ,, X‚ÇÄ‚Åª
-Types (level ,, X‚Å∫ ) = -Levels level ,, X‚Åª
-Types (level ,, X‚Åª ) = -Levels level ,, X‚Å∫
-Types (level ,, X‚ÇÄ‚Åª) = -Levels level ,, X‚ÇÄ‚Å∫

-- coerce : (level-from level-to : NumberLevel) ‚Üí level-to ‚â§‚Çô‚Çó level-from ‚Üí Il level-from ‚Üí Il level-to
-- coerce level-from level-to x = {!!}

--coerce : ‚àÄ{p} ‚Üí (level-from level-to : NumberLevel) ‚Üí level-from ‚â§‚Çô‚Çó' level-to ‚Üí Number (level-from ,, p) ‚Üí Number (level-to ,, p)
--coerce {p} level-from level-to l<l (number (x , q)) = {!!}

-- _ = number ( _,_ {B = Œª x ‚Üí Lift {j = ‚Ñù‚Ñì'} (Œ£ ‚Ñï‚Åø.‚Ñï‚ÇÄ (Œª z ‚Üí z +‚Çô ‚Ñï‚Åø.‚Ñï‚ÇÄ.zero ‚â° ‚Ñï‚Åø.‚Ñï‚ÇÄ.suc ‚Ñï‚Åø.‚Ñï‚ÇÄ.zero))}  (lift {j = ‚Ñù‚Ñì} 1) (lift {j = ‚Ñù‚Ñì'} ( z‚â§n {1} )))  

_ = ( _,_ {B = Œª x ‚Üí Lift {j = ‚Ñù‚Ñì'} (Œ£[ z ‚àà ‚Ñï‚ÇÄ ] z +‚Çô 0 ‚â° 1)} (lift {j = ‚Ñù‚Ñì} 1) (lift {j = ‚Ñù‚Ñì'} ( z‚â§n {1} )))  

_+ ∞‚Åø_ : ‚àÄ{p q} ‚Üí Number (isNat ,, availablePositivity isNat p) ‚Üí Number (isNat ,, availablePositivity isNat q) ‚Üí Number (isNat ,, +-Positivity p q)
_+ ∞‚Åø_ {X  } {X  } (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X  } {X‚Å∫‚Åª} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X  } {X‚ÇÄ‚Å∫} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X  } {X‚Å∫ } (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X  } {X‚ÇÄ‚Åª} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚Å∫‚Åª} {X  } (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚Å∫‚Åª} {X‚Å∫‚Åª} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚Å∫‚Åª} {X‚ÇÄ‚Å∫} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚Å∫‚Åª} {X‚Å∫ } (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚Å∫‚Åª} {X‚ÇÄ‚Åª} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚ÇÄ‚Å∫} {X  } (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚ÇÄ‚Å∫} {X‚Å∫‚Åª} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚ÇÄ‚Å∫} {X‚ÇÄ‚Å∫} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , {!!}) -- 0 ‚â§ a ‚Üí 0 ‚â§ b ‚Üí 0 ‚â§ a + b
_+ ∞‚Åø_ {X‚ÇÄ‚Å∫} {X‚Å∫ } (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , {!!}) -- 0 ‚â§ a ‚Üí 0 < b ‚Üí 0 < a + b
_+ ∞‚Åø_ {X‚ÇÄ‚Å∫} {X‚ÇÄ‚Åª} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚Å∫ } {X  } (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚Å∫ } {X‚Å∫‚Åª} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚Å∫ } {X‚ÇÄ‚Å∫} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , {!!}) -- 0 < a ‚Üí 0 ‚â§ b ‚Üí 0 < a + b
_+ ∞‚Åø_ {X‚Å∫ } {X‚Å∫ } (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , {!!}) -- 0 < a ‚Üí 0 < b ‚Üí 0 < a + b
_+ ∞‚Åø_ {X‚Å∫ } {X‚ÇÄ‚Åª} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚ÇÄ‚Åª} {X  } (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚ÇÄ‚Åª} {X‚Å∫‚Åª} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚ÇÄ‚Åª} {X‚ÇÄ‚Å∫} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚ÇÄ‚Åª} {X‚Å∫ } (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , lift tt)
_+ ∞‚Åø_ {X‚ÇÄ‚Åª} {X‚ÇÄ‚Åª} (number (lift a , pa)) (number (lift b , pb)) = number (lift (a +‚Çô b) , {!!}) -- a ‚â§ 0 ‚Üí b ‚â§ 0 ‚Üí (a + b) ‚â§ 0

_+ ∞·∂ª_ : ‚àÄ{p q} ‚Üí Number (isInt ,, availablePositivity isInt p) ‚Üí Number (isInt ,, availablePositivity isInt q) ‚Üí Number (isInt ,, +-Positivity p q)
_+ ∞·∂ª_ {p} {q} (number (a , pa)) (number (b , pb)) = {!!}

_+ ∞·∂†_ : ‚àÄ{p q} ‚Üí Number (isRat ,, availablePositivity isRat p) ‚Üí Number (isRat ,, availablePositivity isRat q) ‚Üí Number (isRat ,, +-Positivity p q)
_+ ∞·∂†_ {p} {q} (number (a , pa)) (number (b , pb)) = {!!}

_+ ∞ ≥_ : ‚àÄ{p q} ‚Üí Number (isReal ,, availablePositivity isReal p) ‚Üí Number (isReal ,, availablePositivity isReal q) ‚Üí Number (isReal ,, +-Positivity p q)
_+ ∞ ≥_ {X  } {X  } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X  } {X‚Å∫‚Åª} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X  } {X‚ÇÄ‚Å∫} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X  } {X‚Å∫ } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X  } {X‚Åª } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X  } {X‚ÇÄ‚Åª} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Å∫‚Åª} {X  } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Å∫‚Åª} {X‚Å∫‚Åª} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Å∫‚Åª} {X‚ÇÄ‚Å∫} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Å∫‚Åª} {X‚Å∫ } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Å∫‚Åª} {X‚Åª } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Å∫‚Åª} {X‚ÇÄ‚Åª} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚ÇÄ‚Å∫} {X  } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚ÇÄ‚Å∫} {X‚Å∫‚Åª} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚ÇÄ‚Å∫} {X‚ÇÄ‚Å∫} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , {!!}) -- 0 ‚â§ a ‚Üí 0 ‚â§ b ‚Üí 0 ‚â§ a + b
_+ ∞ ≥_ {X‚ÇÄ‚Å∫} {X‚Å∫ } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , {!!}) -- 0 < a ‚Üí 0 < b ‚Üí 0 < a + b
_+ ∞ ≥_ {X‚ÇÄ‚Å∫} {X‚Åª } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚ÇÄ‚Å∫} {X‚ÇÄ‚Åª} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Å∫ } {X  } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Å∫ } {X‚Å∫‚Åª} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Å∫ } {X‚ÇÄ‚Å∫} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , {!!}) -- 0 < a ‚Üí 0 ‚â§ b ‚Üí 0 < a + b
_+ ∞ ≥_ {X‚Å∫ } {X‚Å∫ } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , {!!}) -- 0 < a ‚Üí 0 < b ‚Üí 0 < a + b
_+ ∞ ≥_ {X‚Å∫ } {X‚Åª } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Å∫ } {X‚ÇÄ‚Åª} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Åª } {X  } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Åª } {X‚Å∫‚Åª} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Åª } {X‚ÇÄ‚Å∫} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Åª } {X‚Å∫ } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚Åª } {X‚Åª } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , {!!}) -- a < 0 ‚Üí b < 0 ‚Üí (a + b) < 0
_+ ∞ ≥_ {X‚Åª } {X‚ÇÄ‚Åª} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , {!!}) -- a < 0 ‚Üí b ‚â§ 0 ‚Üí (a + b) < 0
_+ ∞ ≥_ {X‚ÇÄ‚Åª} {X  } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚ÇÄ‚Åª} {X‚Å∫‚Åª} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚ÇÄ‚Åª} {X‚ÇÄ‚Å∫} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚ÇÄ‚Åª} {X‚Å∫ } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , lift tt)
_+ ∞ ≥_ {X‚ÇÄ‚Åª} {X‚Åª } (number (a , pa)) (number (b , pb)) = number (a + ≥ b , {!!}) -- a ‚â§ 0 ‚Üí b < 0 ‚Üí (a + b) < 0
_+ ∞ ≥_ {X‚ÇÄ‚Åª} {X‚ÇÄ‚Åª} (number (a , pa)) (number (b , pb)) = number (a + ≥ b , {!!}) -- a ‚â§ 0 ‚Üí b ‚â§ 0 ‚Üí (a + b) ‚â§ 0

_+ ∞·∂ú_ : ‚àÄ{p q} ‚Üí Number (isComplex ,, availablePositivity isComplex p) ‚Üí Number (isComplex ,, availablePositivity isComplex q) ‚Üí Number (isComplex ,, +-Positivity p q)
_+ ∞·∂ú_ {X  } {X  } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X  } {X‚Å∫‚Åª} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X  } {X‚ÇÄ‚Å∫} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X  } {X‚Å∫ } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X  } {X‚Åª } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X  } {X‚ÇÄ‚Åª} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Å∫‚Åª} {X  } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Å∫‚Åª} {X‚Å∫‚Åª} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt) 
_+ ∞·∂ú_ {X‚Å∫‚Åª} {X‚ÇÄ‚Å∫} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Å∫‚Åª} {X‚Å∫ } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Å∫‚Åª} {X‚Åª } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Å∫‚Åª} {X‚ÇÄ‚Åª} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚ÇÄ‚Å∫} {X  } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚ÇÄ‚Å∫} {X‚Å∫‚Åª} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚ÇÄ‚Å∫} {X‚ÇÄ‚Å∫} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , {!!}) -- ‚ä•
_+ ∞·∂ú_ {X‚ÇÄ‚Å∫} {X‚Å∫ } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , {!!}) -- ‚ä•
_+ ∞·∂ú_ {X‚ÇÄ‚Å∫} {X‚Åª } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚ÇÄ‚Å∫} {X‚ÇÄ‚Åª} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Å∫ } {X  } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Å∫ } {X‚Å∫‚Åª} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Å∫ } {X‚ÇÄ‚Å∫} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , {!!}) -- ‚ä•
_+ ∞·∂ú_ {X‚Å∫ } {X‚Å∫ } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , {!!}) -- ‚ä•
_+ ∞·∂ú_ {X‚Å∫ } {X‚Åª } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Å∫ } {X‚ÇÄ‚Åª} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Åª } {X  } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Åª } {X‚Å∫‚Åª} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Åª } {X‚ÇÄ‚Å∫} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Åª } {X‚Å∫ } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚Åª } {X‚Åª } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , {!!}) -- ‚ä•
_+ ∞·∂ú_ {X‚Åª } {X‚ÇÄ‚Åª} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , {!!}) -- ‚ä•
_+ ∞·∂ú_ {X‚ÇÄ‚Åª} {X  } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚ÇÄ‚Åª} {X‚Å∫‚Åª} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚ÇÄ‚Åª} {X‚ÇÄ‚Å∫} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚ÇÄ‚Åª} {X‚Å∫ } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , lift tt)
_+ ∞·∂ú_ {X‚ÇÄ‚Åª} {X‚Åª } (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , {!!}) -- ‚ä•
_+ ∞·∂ú_ {X‚ÇÄ‚Åª} {X‚ÇÄ‚Åª} (number (a , pa)) (number (b , pb)) = number (a +·∂ú b , {!!}) -- ‚ä•

_+ ∞_ : ‚àÄ{l p q} ‚Üí Number (l ,, availablePositivity l p) ‚Üí Number (l ,, availablePositivity l q) ‚Üí Number (l ,, +-Positivity p q)
_+ ∞_ {isNat    } x y = x + ∞‚Åø y
_+ ∞_ {isInt    } x y = x + ∞·∂ª y
_+ ∞_ {isRat    } x y = x + ∞·∂† y
_+ ∞_ {isReal   } x y = x + ∞ ≥ y
_+ ∞_ {isComplex} x y = x + ∞·∂ú y

_+_ : ‚àÄ{Lx Ly Px Py}
    ‚Üí Number (Lx ,, availablePositivity Lx Px)
    ‚Üí Number (Ly ,, availablePositivity Ly Py)
    ‚Üí Number ((max‚Çô‚Çó' Lx Ly) ,, +-Positivity Px Py) --  (+-Types p q)
_+_ {Lx} {Ly} {Px} {Py} x y =
  let L = max‚Çô‚Çó' Lx Ly
      (Lx‚â§L , Ly‚â§L) = max-implies-‚â§‚Çô‚Çó‚ÇÇ' Lx Ly
  in coerce Lx L Lx‚â§L x + ∞ coerce Ly L Ly‚â§L y

-- pattern [‚Ñù‚ÇÄ‚Å∫] = (isReal ,, X‚ÇÄ‚Å∫)
[‚Ñù‚ÇÄ‚Å∫] = Number (isReal ,, X‚ÇÄ‚Å∫)

{-# DISPLAY Number (isReal ,, X‚ÇÄ‚Å∫) = [‚Ñù‚ÇÄ‚Å∫] #-}

test101 : Number (isNat ,, isPositive) ‚Üí Number (isReal ,,  isNonnegative) ‚Üí {!!}
test101 n r with n + r
... | number (fst‚ÇÅ , snd‚ÇÅ) =
  let z = [‚Ñù‚ÇÄ‚Å∫] ‚àã r + r
      x = num z
      xp = prp z
  in {! prp z!}
