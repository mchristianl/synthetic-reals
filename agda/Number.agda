{-# OPTIONS --cubical --no-import-sorts #-}

module Number where

open import Agda.Primitive renaming (_‚äî_ to ‚Ñì-max; lsuc to ‚Ñì-suc; lzero to ‚Ñì-zero)

private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' : Level

open import Cubical.Foundations.Everything renaming (_‚Åª¬π to _‚Åª¬π·µñ; assoc to ‚àô-assoc)
open import Cubical.Relation.Nullary.Base -- ¬¨_
open import Cubical.Relation.Binary.Base -- Rel

-- open import Data.Nat.Base using (‚Ñï) renaming (_‚â§_ to _‚â§‚Çô_)
open import Cubical.Data.Nat using (‚Ñï; zero; suc) renaming (_+_ to _+‚Çô_)
open import Cubical.Data.Nat.Order renaming (zero-‚â§ to z‚â§n; suc-‚â§-suc to s‚â§s; _‚â§_ to _‚â§‚Çô_; _<_ to _<‚Çô_)

open import Cubical.Data.Unit.Base -- Unit
open import Cubical.Data.Empty -- ‚ä•
open import Cubical.Data.Sum.Base renaming (_‚äé_ to infixr 4 _‚äé_)
open import Cubical.Data.Sigma.Base renaming (_√ó_ to infixr 4 _√ó_)
open import Cubical.Data.Empty renaming (elim to ‚ä•-elim) -- `‚ä•` and `elim`
open import Cubical.Data.Maybe.Base

-- open import Bundles

open import NumberPostulates
open import NumberStructures ‚Ñù‚Ñì ‚Ñù‚Ñì'
open import NumberBundles    ‚Ñù‚Ñì ‚Ñù‚Ñì'
open import NumberInclusions ‚Ñù‚Ñì ‚Ñù‚Ñì'
open import NumberBlueprint  ‚Ñù‚Ñì ‚Ñù‚Ñì'

‚Ñù‚Ü™‚Ñù : ‚ÑùCarrier ‚Üí ‚ÑùCarrier
‚Ñù‚Ü™‚Ñù x = x

{-
‚Ñù‚Ü™‚Ñùinc : IsROrderedFieldInclusion ‚ÑùOF ‚ÑùOF ‚Ñù‚Ü™‚Ñù
‚Ñù‚Ü™‚Ñùinc = {!!}
-}


open import Cubical.Data.Fin.Base
-- import Cubical.Data.Fin.Properties
open import Cubical.Data.Nat using (‚Ñï; zero; suc) renaming (_+_ to _+‚Çô_)
open import Cubical.Data.Nat.Properties using (+-suc; injSuc; snotz; +-comm; +-assoc; +-zero; inj-m+)
open import Cubical.Data.Nat.Order renaming (zero-‚â§ to z‚â§n; suc-‚â§-suc to s‚â§s; _‚â§_ to _‚â§‚Çô_; _<_ to _<‚Çô_; _‚âü_ to _‚âü‚Çô_)
-- open import Data.Nat.Base using (‚Ñï; z‚â§n; s‚â§s; zero; suc) renaming (_‚â§_ to _‚â§‚Çô_; _<_ to _<‚Çô_; _+_ to _+‚Çô_)
open import Agda.Builtin.Bool renaming (true to TT; false to FF)
open import Function.Base using (it; _$_) -- instance search
import Cubical.Data.Fin.Properties
open import Data.Nat.Properties using (+-mono-<)

-- NOTE: well, for 15 allowed coercions, we might just enumerate them
--   unfortunately with overlapping patterns a style as in `Cl` is not possible
--   we need to explicitly write out all the 5√ó5 combinations
--   or, we implement a min operator which might work even with overlapping patterns

k+x+sy‚â¢x : ‚àÄ k x y ‚Üí ¬¨(k +‚Çô (x +‚Çô suc y) ‚â° x)
k+x+sy‚â¢x k x y p = snotz $ sym (+-suc k y) ‚àô inj-m+ {x} (+-assoc x k (suc y) ‚àô (Œª i ‚Üí (+-comm x k) i +‚Çô (suc y)) ‚àô sym (+-assoc k x (suc y)) ‚àô p ‚àô sym (+-zero x))

data Number (p : NumberProp) : Type (‚Ñì-max ‚Ñù‚Ñì ‚Ñù‚Ñì') where
  number : In p ‚Üí Number p

num : ‚àÄ{(l ,, p) : NumberProp} ‚Üí Number (l ,, p) ‚Üí Il l
num (number p) = fst p
-- num {isNat     ,, p} (number (x , q)) = x
-- num {isInt     ,, p} (number (x , q)) = x
-- num {isRat     ,, p} (number (x , q)) = x
-- num {isReal    ,, p} (number (x , q)) = x
-- num {isComplex ,, p} (number (x , q)) = x


-- TODO: name this "inject" instead of "coerce"
-- TODO: make the module ‚Ñ§ and the Carrier ‚Ñ§.‚Ñ§
-- TODO: for a binary relation `a # b` it would be nice to have a way to compose ‚â°-pathes to the left and the right
--       similar to how ‚àô can be used for pathes
--       this reasoning might extend to transitive relations
--       `cong‚ÇÇ _#_ refl x` and `cong‚ÇÇ _#_ x refl` to this (together with `transport`)
-- NOTE: maybe ‚Ñï‚Ü™‚Ñ§ should be a postfix operation

module _ where
  module ‚Ñï' = ROrderedCommSemiring ‚ÑïOCSR
  module ‚Ñ§' = ROrderedCommRing     ‚Ñ§OCR
  module ‚Ñö' = ROrderedField        ‚ÑöOF
  module ‚Ñù' = ROrderedField        ‚ÑùOF
  module ‚ÑÇ' = RField               ‚ÑÇF

  -- coerce-OCSR : ‚àÄ{l p} {ll : NumberLevel} {ùïèOCSR ùïêOCSR : ROrderedCommSemiring {‚Ñù‚Ñì} {‚Ñù‚Ñì'}}
  --             ‚Üí (x : Number (l ,, p))
  --             ‚Üí {f : Il l ‚Üí Il ll}
  --             ‚Üí IsROrderedCommSemiringInclusion ùïèOCSR ùïêOCSR f
  --             ‚Üí Ip ll p (f (num x))
  -- coerce-OCSR {l} {ll} {p} {ùïèOCSR} {ùïêOCSR} {f} (number (x , q)) = ?

  module _ where
    open ‚Ñ§'
    open IsROrderedCommSemiringInclusion ‚Ñï‚Ü™‚Ñ§inc
    private f = ‚Ñï‚Ü™‚Ñ§
    coerce-‚Ñï‚Ü™‚Ñ§ : ‚àÄ{p} ‚Üí (x : Number (isNat ,, p)) ‚Üí Ip isInt p (‚Ñï‚Ü™‚Ñ§ (num x))
    coerce-‚Ñï‚Ü™‚Ñ§ {‚Åáx‚Åá} (number (x , q)) = lift tt
    coerce-‚Ñï‚Ü™‚Ñ§ {x#0} (number (x , q)) = transport (Œª i ‚Üí f x # preserves-0 i) (preserves-# _ _ q)
    coerce-‚Ñï‚Ü™‚Ñ§ {0‚â§x} (number (x , q)) = transport (Œª i ‚Üí preserves-0 i ‚â§ f x) (preserves-‚â§ _ _ q)
    coerce-‚Ñï‚Ü™‚Ñ§ {0<x} (number (x , q)) = transport (Œª i ‚Üí preserves-0 i < f x) (preserves-< _ _ q)
    coerce-‚Ñï‚Ü™‚Ñ§ {x‚â§0} (number (x , q)) = transport (Œª i ‚Üí f x ‚â§ preserves-0 i) (preserves-‚â§ _ _ q)

  module _ where
    open ‚Ñö'
    open IsROrderedCommSemiringInclusion ‚Ñï‚Ü™‚Ñöinc
    private f = ‚Ñï‚Ü™‚Ñö
    coerce-‚Ñï‚Ü™‚Ñö : ‚àÄ{p} ‚Üí (x : Number (isNat ,, p)) ‚Üí Ip isRat p (‚Ñï‚Ü™‚Ñö (num x))
    coerce-‚Ñï‚Ü™‚Ñö {‚Åáx‚Åá} (number (x , q)) = lift tt
    coerce-‚Ñï‚Ü™‚Ñö {x#0} (number (x , q)) = transport (Œª i ‚Üí f x # preserves-0 i) (preserves-# _ _ q) 
    coerce-‚Ñï‚Ü™‚Ñö {0‚â§x} (number (x , q)) = transport (Œª i ‚Üí preserves-0 i ‚â§ f x) (preserves-‚â§ _ _ q) 
    coerce-‚Ñï‚Ü™‚Ñö {0<x} (number (x , q)) = transport (Œª i ‚Üí preserves-0 i < f x) (preserves-< _ _ q) 
    coerce-‚Ñï‚Ü™‚Ñö {x‚â§0} (number (x , q)) = transport (Œª i ‚Üí f x ‚â§ preserves-0 i) (preserves-‚â§ _ _ q)

  module _ where
    open ‚Ñù'
    open IsROrderedCommSemiringInclusion ‚Ñï‚Ü™‚Ñùinc
    private f = ‚Ñï‚Ü™‚Ñù
    coerce-‚Ñï‚Ü™‚Ñù : ‚àÄ{p} ‚Üí (x : Number (isNat ,, p)) ‚Üí Ip isReal p (‚Ñï‚Ü™‚Ñù (num x))
    coerce-‚Ñï‚Ü™‚Ñù {‚Åáx‚Åá} (number (x , q)) = lift tt
    coerce-‚Ñï‚Ü™‚Ñù {x#0} (number (x , q)) = transport (Œª i ‚Üí f x # preserves-0 i) (preserves-# _ _ q)
    coerce-‚Ñï‚Ü™‚Ñù {0‚â§x} (number (x , q)) = transport (Œª i ‚Üí preserves-0 i ‚â§ f x) (preserves-‚â§ _ _ q)
    coerce-‚Ñï‚Ü™‚Ñù {0<x} (number (x , q)) = transport (Œª i ‚Üí preserves-0 i < f x) (preserves-< _ _ q)
    coerce-‚Ñï‚Ü™‚Ñù {x‚â§0} (number (x , q)) = transport (Œª i ‚Üí f x ‚â§ preserves-0 i) (preserves-‚â§ _ _ q)

  module _ where
    open ‚ÑÇ'
    -- open IsRFieldInclusion ‚Ñï‚Ü™‚Ñùinc
    private f = ‚Ñï‚Ü™‚ÑÇ
    coerce-‚Ñï‚Ü™‚ÑÇ : ‚àÄ{p} ‚Üí (x : Number (isNat ,, p)) ‚Üí Ip isComplex (availablePositivity isComplex p) (‚Ñï‚Ü™‚ÑÇ (num x))
    coerce-‚Ñï‚Ü™‚ÑÇ {‚Åáx‚Åá} (number (x , q)) = lift tt
    coerce-‚Ñï‚Ü™‚ÑÇ {x#0} (number (x , q)) = {!transport (Œª i ‚Üí f x # preserves-0 i) (preserves-# _ _ q)!}
    coerce-‚Ñï‚Ü™‚ÑÇ {0‚â§x} (number (x , q)) = lift tt
    coerce-‚Ñï‚Ü™‚ÑÇ {0<x} (number (x , q)) = {!!}
    coerce-‚Ñï‚Ü™‚ÑÇ {x‚â§0} (number (x , q)) = lift tt

  coerce-‚Ñ§‚Ü™‚Ñö : ‚àÄ{p} ‚Üí (x : Number (isInt ,, p)) ‚Üí Ip isRat p (‚Ñ§‚Ü™‚Ñö (num x))
  coerce-‚Ñ§‚Ü™‚Ñö {‚Åáx‚Åá} (number (x , q)) = lift tt
  coerce-‚Ñ§‚Ü™‚Ñö {x#0} (number (x , q)) = {!!}
  coerce-‚Ñ§‚Ü™‚Ñö {0‚â§x} (number (x , q)) = {!!}
  coerce-‚Ñ§‚Ü™‚Ñö {0<x} (number (x , q)) = {!!}
  coerce-‚Ñ§‚Ü™‚Ñö {x<0} (number (x , q)) = {!!}
  coerce-‚Ñ§‚Ü™‚Ñö {x‚â§0} (number (x , q)) = {!!}

  coerce-‚Ñ§‚Ü™‚Ñù : ‚àÄ{p} ‚Üí (x : Number (isInt ,, p)) ‚Üí Ip isReal p (‚Ñ§‚Ü™‚Ñù (num x))
  coerce-‚Ñ§‚Ü™‚Ñù {‚Åáx‚Åá} (number (x , q)) = lift tt
  coerce-‚Ñ§‚Ü™‚Ñù {x#0} (number (x , q)) = {!!}
  coerce-‚Ñ§‚Ü™‚Ñù {0‚â§x} (number (x , q)) = {!!}
  coerce-‚Ñ§‚Ü™‚Ñù {0<x} (number (x , q)) = {!!}
  coerce-‚Ñ§‚Ü™‚Ñù {x<0} (number (x , q)) = {!!}
  coerce-‚Ñ§‚Ü™‚Ñù {x‚â§0} (number (x , q)) = {!!}

  coerce-‚Ñ§‚Ü™‚ÑÇ : ‚àÄ{p} ‚Üí (x : Number (isInt ,, p)) ‚Üí Ip isComplex p (‚Ñ§‚Ü™‚ÑÇ (num x))
  coerce-‚Ñ§‚Ü™‚ÑÇ {‚Åáx‚Åá} (number (x , q)) = lift tt
  coerce-‚Ñ§‚Ü™‚ÑÇ {x#0} (number (x , q)) = {!!}
  coerce-‚Ñ§‚Ü™‚ÑÇ {0‚â§x} (number (x , q)) = {!!}
  coerce-‚Ñ§‚Ü™‚ÑÇ {0<x} (number (x , q)) = {!!}
  coerce-‚Ñ§‚Ü™‚ÑÇ {x<0} (number (x , q)) = {!!}
  coerce-‚Ñ§‚Ü™‚ÑÇ {x‚â§0} (number (x , q)) = {!!}

  coerce-‚Ñö‚Ü™‚Ñù : ‚àÄ{p} ‚Üí (x : Number (isRat ,, p)) ‚Üí Ip isReal p (‚Ñö‚Ü™‚Ñù (num x))
  coerce-‚Ñö‚Ü™‚Ñù {‚Åáx‚Åá} (number (x , q)) = lift tt
  coerce-‚Ñö‚Ü™‚Ñù {x#0} (number (x , q)) = {!!}
  coerce-‚Ñö‚Ü™‚Ñù {0‚â§x} (number (x , q)) = {!!}
  coerce-‚Ñö‚Ü™‚Ñù {0<x} (number (x , q)) = {!!}
  coerce-‚Ñö‚Ü™‚Ñù {x<0} (number (x , q)) = {!!}
  coerce-‚Ñö‚Ü™‚Ñù {x‚â§0} (number (x , q)) = {!!}

  coerce-‚Ñö‚Ü™‚ÑÇ : ‚àÄ{p} ‚Üí (x : Number (isRat ,, p)) ‚Üí Ip isComplex p (‚Ñö‚Ü™‚ÑÇ (num x))
  coerce-‚Ñö‚Ü™‚ÑÇ {‚Åáx‚Åá} (number (x , q)) = lift tt
  coerce-‚Ñö‚Ü™‚ÑÇ {x#0} (number (x , q)) = {!!}
  coerce-‚Ñö‚Ü™‚ÑÇ {0‚â§x} (number (x , q)) = {!!}
  coerce-‚Ñö‚Ü™‚ÑÇ {0<x} (number (x , q)) = {!!}
  coerce-‚Ñö‚Ü™‚ÑÇ {x<0} (number (x , q)) = {!!}
  coerce-‚Ñö‚Ü™‚ÑÇ {x‚â§0} (number (x , q)) = {!!}

  coerce-‚Ñù‚Ü™‚ÑÇ : ‚àÄ{p} ‚Üí (x : Number (isReal ,, p)) ‚Üí Ip isComplex p (‚Ñù‚Ü™‚ÑÇ (num x))
  coerce-‚Ñù‚Ü™‚ÑÇ {‚Åáx‚Åá} (number (x , q)) = lift tt
  coerce-‚Ñù‚Ü™‚ÑÇ {x#0} (number (x , q)) = {!!}
  coerce-‚Ñù‚Ü™‚ÑÇ {0‚â§x} (number (x , q)) = {!!}
  coerce-‚Ñù‚Ü™‚ÑÇ {0<x} (number (x , q)) = {!!}
  coerce-‚Ñù‚Ü™‚ÑÇ {x<0} (number (x , q)) = {!!}
  coerce-‚Ñù‚Ü™‚ÑÇ {x‚â§0} (number (x , q)) = {!!}

coerce : (from : NumberLevel)
       ‚Üí (to   : NumberLevel)
       ‚Üí from ‚â§‚Çô‚Çó' to
       ‚Üí ‚àÄ{p}
       ‚Üí Number (from ,, availablePositivity from p)
       ‚Üí Number (to   ,, availablePositivity to   p)
coerce isNat     isNat     q {p} x = x 
coerce isNat     isInt     q {p} x = number (‚Ñï‚Ü™‚Ñ§ (num x) , coerce-‚Ñï‚Ü™‚Ñ§ x)
coerce isNat     isRat     q {p} x = {! ‚Ñï‚Ü™‚Ñö !}
coerce isNat     isReal    q {p} x = {! ‚Ñï‚Ü™‚Ñù !}
coerce isNat     isComplex q {p} x = {! ‚Ñï‚Ü™‚ÑÇ !}
coerce isInt     isInt     q {p} x = x 
coerce isInt     isRat     q {p} x = {! ‚Ñ§‚Ü™‚Ñö !}
coerce isInt     isReal    q {p} x = {! ‚Ñ§‚Ü™‚Ñù !}
coerce isInt     isComplex q {p} x = {! ‚Ñ§‚Ü™‚ÑÇ !}
coerce isRat     isRat     q {p} x = x 
coerce isRat     isReal    q {p} x = {! ‚Ñö‚Ü™‚Ñù !}
coerce isRat     isComplex q {p} x = {! ‚Ñö‚Ü™‚ÑÇ !}
coerce isReal    isReal    q {p} x = x 
coerce isReal    isComplex q {p} x = {! ‚Ñù‚Ü™‚ÑÇ !}
coerce isComplex isComplex q {p} x = x 
--coerce x         y         = nothing
coerce isInt     isNat  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isNat  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isRat     isNat  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isNat  ,, p)} (k+x+sy‚â¢x _ _ _ q)  
coerce isRat     isInt  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isInt  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isReal    isNat  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isNat  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isReal    isInt  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isInt  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isReal    isRat  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isRat  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isComplex isNat  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isNat  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isComplex isInt  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isInt  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isComplex isRat  (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isRat  ,, p)} (k+x+sy‚â¢x _ _ _ q)
coerce isComplex isReal (k , q) {p} x = ‚ä•-elim {A = Œª _ ‚Üí Number (isReal ,, p)} (k+x+sy‚â¢x _ _ _ q)

+-Types : NumberProp ‚Üí NumberProp ‚Üí NumberProp
+-Types (level‚ÇÄ ,, pos‚ÇÄ) (level‚ÇÅ ,, pos‚ÇÅ) = (Cl level‚ÇÄ level‚ÇÅ) ,, +-Positivity pos‚ÇÄ pos‚ÇÅ

¬∑-Types : NumberProp ‚Üí NumberProp ‚Üí NumberProp
¬∑-Types (level‚ÇÄ ,, pos‚ÇÄ) (level‚ÇÅ ,, pos‚ÇÅ) =  (Cl level‚ÇÄ level‚ÇÅ) ,, ¬∑-Positivity pos‚ÇÄ pos‚ÇÅ

‚Åª¬π-Levels : (a : NumberLevel) ‚Üí Œ£[ b ‚àà NumberLevel ] a ‚â§‚Çô‚Çó b
‚Åª¬π-Levels isNat     = isRat     , it
‚Åª¬π-Levels isInt     = isRat     , it
‚Åª¬π-Levels isRat     = isRat     , it
‚Åª¬π-Levels isReal    = isReal    , it
‚Åª¬π-Levels isComplex = isComplex , it

‚Åª¬π-Levels' : (a : NumberLevel) ‚Üí NumberLevel
‚Åª¬π-Levels' x = max‚Çô‚Çó' x isRat

‚Åª¬π-Types : NumberProp ‚Üí Maybe NumberProp
‚Åª¬π-Types (level ,, X  ) = nothing
‚Åª¬π-Types (level ,, X‚ÇÄ‚Å∫) = nothing
‚Åª¬π-Types (level ,, X‚ÇÄ‚Åª) = nothing
‚Åª¬π-Types (level ,, p  ) = just (fst (‚Åª¬π-Levels level) ,, p)

-Levels : NumberLevel ‚Üí NumberLevel
-Levels x = min‚Çô‚Çó' x isInt
-- -Levels isNat = isInt
-- -Levels x     = x

-Types : NumberProp ‚Üí NumberProp
-Types (level ,, X  ) = -Levels level ,, X
-Types (level ,, X‚Å∫‚Åª) = -Levels level ,, X‚Å∫‚Åª
-Types (level ,, X‚ÇÄ‚Å∫) = -Levels level ,, X‚ÇÄ‚Åª
-Types (level ,, X‚Å∫ ) = -Levels level ,, X‚Åª
-Types (level ,, X‚Åª ) = -Levels level ,, X‚Å∫
-Types (level ,, X‚ÇÄ‚Åª) = -Levels level ,, X‚ÇÄ‚Å∫


-- coerce : (level-from level-to : NumberLevel) ‚Üí level-to ‚â§‚Çô‚Çó level-from ‚Üí Il level-from ‚Üí Il level-to
-- coerce level-from level-to x = {!!}

--coerce : ‚àÄ{p} ‚Üí (level-from level-to : NumberLevel) ‚Üí level-from ‚â§‚Çô‚Çó' level-to ‚Üí Number (level-from ,, p) ‚Üí Number (level-to ,, p)
--coerce {p} level-from level-to l<l (number (x , q)) = {!!}

_+'_ : ‚àÄ{l p q} ‚Üí Number (l ,, p) ‚Üí Number (l ,, q) ‚Üí Number (l ,, +-Positivity p q)
_+'_ a b = {!!}

_+_ : ‚àÄ{p q} ‚Üí Number p ‚Üí Number q ‚Üí Number (+-Types p q)
_+_ {xlevel ,, xpos} {ylevel ,, ypos} (number (x , xp)) (number (y , yp)) = number ({!!} , {!!})



